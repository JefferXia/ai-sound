// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique @db.VarChar(64) // 唯一的电子邮件字段
  password   String?     @db.VarChar(64) // 可选的密码字段
  name       String      @db.VarChar(50)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  AudioWork  AudioWork[]
  accounts   Account[]       // 用户与账户的关系
}

model AudioWork {
  id            String   @id @default(uuid())
  audio_task_id String   @unique
  title         String   @default("") @db.VarChar(50)
  description   String   @default("") @db.VarChar(255)
  script        String
  audio_url     String   @default("")
  model_info    Json     @default("{}")
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  User          User     @relation(fields: [user_id], references: [id])
  user_id       String
  user_name     String

  @@index([user_id, is_deleted, created_at(sort: Desc)])
  @@index([is_deleted, created_at(sort: Desc)])
}

enum ContentType {
  TEXT
  AUDIO
  IMAGE
  VIDEO
}
enum FileFormat {
  // Text formats
  PLAIN_TEXT
  MD
  PDF
  DOC
  // Audio formats
  MP3
  WAV
  M4A
  AAC
  // Image formats
  PNG
  JPG
  JPEG
  SVG
  WEBP
  // Video formats
  MP4
  MOV
  AVI
  WEBM
}
enum TaskStatus {
  SUCCESS
  FAILED
  QUEUEING
  PROCESSING
}
model CreateTask {
  id           String      @id @default(uuid())
  user_id      String
  content_type ContentType
  file_format  FileFormat // for simple text while is not a file format, fill with PLAIN_TEXT
  content      String // url if it's a file or text if it's a text
  status       TaskStatus
  is_deleted   Boolean  @default(false)
  task_info    Json @default("{}") // Additional task metadata like model info, processing parameters, etc.
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  @@index([user_id, created_at(sort: Desc)])
}

model Account {
  id              String    @id @default(uuid())           // 账户ID
  user_id         String                                   // 外键，关联用户
  balance         Int       @default(0)                    // 总余额，包括所有代币
  gift_tokens     Int       @default(0)                 // 赠送代币余额
  recharge_tokens Int       @default(0)                 // 充值代币余额
  earned_tokens   Int       @default(0)                  // 赚取的代币余额
  created_at      DateTime  @default(now())                // 创建时间
  updated_at      DateTime  @updatedAt                     // 更新时间
  grade           String    @default("REGULAR")            // 会员等级（REGULAR、VIP、SVIP）
  user            User      @relation(fields: [user_id], references: [id]) // 与用户的关系
  gifts           GiftRecord[]
  recharges       RechargeRecord[]
  transactions    TransactionRecord[]
}

model GiftRecord {
  id              Int       @id @default(autoincrement())   // 赠送记录ID，自增主键
  account_id      String                                       // 外键，关联账户
  amount          Int       @default(0)                        // 赠送的代币数量
  created_at      DateTime  @default(now())                 // 创建时间
  type            String
  account         Account   @relation(fields: [account_id], references: [id]) // 与账户的关系
}

model RechargeRecord {
  id              Int      @id @default(autoincrement())
  account_id      String
  amount          Int      @default(0) 
  created_at      DateTime @default(now())
  order_number    String   @unique                        // 订单号，唯一
  source          String                                  // 充值来源（如：支付宝、微信、银行卡等）
  status          String   @default("PENDING")            // 充值状态（如：PENDING, COMPLETED, FAILED）
  account         Account  @relation(fields: [account_id], references: [id]) // 与账户的关系
}

model TransactionRecord {
  id             Int      @id @default(autoincrement())
  account_id     String
  price          Int      @default(0) 
  created_at     DateTime @default(now())
  type           String
  account        Account   @relation(fields: [account_id], references: [id]) // 与账户的关系
}

model Video {
  id          String   @id @default(cuid())   // 视频ID，使用cuid生成唯一标识符
  video_url   String   @db.Text               // 视频URL，非空
  audio_url   String?  @db.Text               // 音频URL，可选
  video_id    String   @db.Text               // 视频外站ID
  title       String   @db.Text               // 标题
  content     String?  @db.Text               // 视频文案，可选
  metadata    Json?    @db.Json                // 元数据，JSON格式，可选
  subtitles   Json?    @db.Json                // 字幕，JSON格式，可选
  scene       Json?    @db.Json                // 场景，JSON格式，可选
  summary     String?  @db.Text               // 摘要，可选
  user_id     String                         // 用户ID，可选
  status      String
  source      String
  created_at  DateTime  @default(now())                // 创建时间
  updated_at  DateTime  @updatedAt                     // 更新时间
}